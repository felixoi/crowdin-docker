name: CI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the Crowdin CLI'
        required: true
      latest:
        description: 'Whether the new image should be tagged as latest'
        required: false
        default: 'true'

env:
  IMAGE_NAME: crowdin-docker

jobs:
  publish-docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Process tags
      id: tags
      run: |
        if [[ ${{ github.event.inputs.latest }} == 'true' ]]; then export tags=latest,; fi 
        export tags="$tags"${{ github.event.inputs.version }}
        echo "::set-output name=tags::$tags"
    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: ${{ github.repository_owner }}/{{ env.IMAGE_NAME }},ghcr.io/${{ github.repository_owner }}/{{ env.IMAGE_NAME }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
